{{- range $value := . -}}
[sources.source_{{$value.Key}}]
type = "file"
include = [ "{{$value.LogDir}}" ]
line_delimiter = "\n"
read_from = "beginning"

[transforms.transform_{{$value.Key}}]
type = "remap"
inputs = ["source_{{$value.Key}}"]
source = '''
# .file will be a string but vector doesn't know that and will throw an error
# because it's .file would be implicitly any. hence using to_string() with
# a fallback since it could potentially throw an error when .file is not available
.stream = if contains(to_string(.file) ?? "to_string() failed", "stdout") { "stdout" } else { "stderr" }
'''

[sinks.loki_{{$value.Key}}]
type = "loki"
inputs = ["transform_{{$value.Key}}"]

# loki server details
endpoint = "{{$value.LokiEndpoint}}"
auth.strategy="basic"
auth.user="{{$value.LokiUser}}"
auth.password="{{$value.LokiPassword}}"

# text encoding will push the .message field to Loki instead of the entire JSON
encoding.codec = "text"

# labels for logs
labels.stream = "{{ `{{ .stream }}` }}"  # fetch the evaluated stream from the transform block
labels.job_id = "{{$value.Job}}"
# labels.function_id = "{{index $value.Meta "function_id"}}"
labels.user_id = "{{index $value.Meta "user_id"}}"
{{ end }}

# send a batch of logs every 5 seconds. default is 1s which is overkill ig
batch.timeout_secs = 5