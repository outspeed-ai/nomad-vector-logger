job "vector" {
  datacenters = ["dc1"]
  namespace   = "default"
  type        = "system"

  group "vector" {
    count = 1
    restart {
      attempts = 3
      interval = "10m"
      delay    = "30s"
      mode     = "fail"
    }

    # For vector's data directory.
    ephemeral_disk {
      size   = 500
      sticky = true
    }

    network {
      port "metrics" {
        to     = 8686
        static = 8686
      }
      mode = "host"
    }

    service {
      provider = "nomad"
      name     = "vector-agent-monitoring"
      port     = "metrics"
    }

    task "vector" {
      # Need access to the underlying `/opt/nomad/data/alloc` directory to get the logs.
      driver = "raw_exec"

      # Run the program.
      config {
        # Path to vector on your host machine.
        command = "/usr/local/bin/vector"
        args = [
          "--watch-config",
          "--config",
          "$${NOMAD_TASK_DIR}/base.toml",
          "--config-dir=$${NOMAD_ALLOC_DIR}/vector_gen_configs/"
        ]
      }

      resources {
        cpu    = 500
        memory = 500
      }

      # Template with Vector's configuration
      template {
        data        = file(abspath("./dev/base.toml.tpl"))
        destination = "local/base.toml"
        change_mode = "restart"
        # overriding the delimiters to [[ ]] to avoid conflicts with Vector's native templating, which also uses {{ }}
        left_delimiter  = "[["
        right_delimiter = "]]"
      }

      # Some delay in killing the task in case Vector is still sending data to upstream sinks,
      kill_timeout = "60s"
    }

    task "nomad-vector-logger" {
      # Need access to Nomad API running.
      driver = "raw_exec"

      # Should run first so that it can generate a config for vector.
      lifecycle {
        hook    = "prestart"
        sidecar = true
      }

      meta {
        nomad_addr = "${nomad.advertise.address}"
      }

      # Run the program.
      config {
        command = "/usr/local/bin/nomad-vector-logger.bin"
        args = [
          "--config",
          "$${NOMAD_TASK_DIR}/nomad-vector-logger.toml"
        ]
      }

      resources {
        cpu    = 500
        memory = 500
      }

      # Template with Vector's configuration
      template {
        data        = file(abspath("./dev/nomad-vector-logger.toml.tpl"))
        destination = "local/nomad-vector-logger.toml"
        change_mode = "restart"
      }
      template {
        data = <<EOH
NOMAD_ADDR="http://{{env "NOMAD_IP_metrics"}}:4646"
EOH

        destination = "secrets/file.env"
        env         = true
      }
      template {
        data        = file(abspath("./dev/static/sink.toml.tpl"))
        destination = "local/static/sink.toml"
        change_mode = "restart"
        # overriding the delimiters to [[ ]] to avoid conflicts with Vector's native templating, which also uses {{ }}
        left_delimiter  = "[["
        right_delimiter = "]]"
      }
    }

    task "await-config-generation" {
      driver = "raw_exec"

      # This waits till the config files are generated by nomad-vector-logger before starting vector.
      config {
        command = "/usr/bin/bash"
        args = [
          "-c",
          "echo -n 'Waiting for files to be generated'; until ls -laht ${NOMAD_ALLOC_DIR}/vector_gen_configs/nomad.toml 2>&1 >/dev/null; do echo '.'; sleep 2; done"
        ]
      }

      resources {
        cpu    = 200
        memory = 128
      }

      lifecycle {
        hook    = "prestart"
        sidecar = false
      }
    }
  }
}
